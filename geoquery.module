<?php

/**
 * Implements hook_views_api().
 */
function geoquery_views_api() {
  return array(
    'api' => 3,
  );
}

/************************* GEO-SPATIAL QUERY FUNCITONS ************************/

/**
 * Whether the geometry of the first node intersects the geometry of the second.
 */
function geoquery_intersects($item1, $item2) {
  $geo_query = new geoQuery();
  return $geo_query->booleanRelQuery('ST_Intersects', $item1, $item2);
}

/**
 * Whether the geometry of the first node is within the geometry of the second.
 */
function geoquery_within($item1, $item2) {
  $geo_query = new geoQuery();
  return $geo_query->booleanRelQuery('ST_Within', $item1, $item2);
}

/**
 * Whether the first node is within the $distance buffer of the second node.
 *
 * Since the standard geometry column uses SRID 4326, distances will be
 * measured in degrees. Therefore, it's possible to pass in a different geometry
 * column to use, if one exists on the pg_node table, whose SRID uses e.g. meters.
 */
function geoquery_dwithin($item1, $item2, $distance = 0, $column = 'geom') {
  $geo_query = new geoQuery($column);
  return $geo_query->booleanRelQuery('ST_DWithin', $item1, $item2, $distance);
}